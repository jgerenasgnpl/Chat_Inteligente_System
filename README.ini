Sistema de Chat Inteligente con ML

Sistema de chatbot para gestión de cobranzas con aprendizaje automático y flujos de conversación dinámicos.

Características

### **Inteligencia Artificial**
- Clasificación automática de intenciones con ML
- Entrenamiento continuo desde archivos Excel
- Auto-aprendizaje y mejora automática
- Detección de patrones conversacionales

### **Gestión de Conversaciones**
- Estados dinámicos de conversación
- Flujos personalizados por cliente
- Detección automática de cédulas
- Variables dinámicas en mensajes

### **Monitoreo y Analytics**
- Logs detallados de conversaciones
- Métricas de rendimiento ML
- Dashboard de seguimiento
- Reportes automáticos

## **Arquitectura** 
app/
├── api/                
│   ├── endpoints/
│   │   ├── chat.py       
│   │   └── admin_config.py 
│   └── deps.py         
├── core/            
│   ├── config.py        
│   ├── auth.py         
│   └── logging.py       
├── machine_learning/     
│   ├── ml_service_adaptado.py  
│   ├── train/            
│   │   ├── train_intention_classifier.py
│   │   └── auto_train.py  
│   └── ml.py             
├── services/             
│   ├── flow_manager.py  
│   ├── state_manager.py  
│   ├── nlp_service.py   
│   └── variable_service.py 
├── models/              
├── schemas/           
└── db/                

## Instalación

    ### ** Clonar repositorio:**
```bash
git clone <repo-url>
cd proyecto-chat
2. Instalar dependencias:
bashpip install -r requirements.txt
3. Configurar base de datos:
bash# Configurar string de conexión en core/config.py
DATABASE_URL = "mssql+pyodbc://..."
4. Ejecutar aplicación:
bashuvicorn main:app --reload --host 0.0.0.0 --port 8000
🤖 Entrenamiento ML
Entrenamiento Manual:
bash
python machine_learning/train/train_intention_classifier.py --datos "data/datos_entrenamiento.xlsx"

# estados de conversación
python machine_learning/train/train_intention_classifier.py --datos "data/datos_entrenamiento.xlsx" --estados "data/estados_conversacion.xlsx"
Entrenamiento Automático:
bash
python machine_learning/auto_train.py
Estructura Excel - Datos de Entrenamiento:
texto_mensajeintencion_realconfianzacontexto_adicionalcuanto deboCONSULTA_DEUDA0.95cliente_activo
Estructura Excel - Estados:
nombremensaje_templateaccionestado_sig_truevalidar_documentoNecesito tu cédulavalidar_docinformar_deuda
🔧 Configuración
Variables de Entorno:
bashSECRET_KEY=tu_clave_secreta
DATABASE_URL=mssql+pyodbc://...
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30
Archivos de Configuración:

core/config.py - Configuración principal
data/training/ - Archivos Excel para entrenamiento
models/ - Modelos ML entrenados

📊 API Endpoints
Chat:

POST /api/v1/chat/message - Enviar mensaje
GET /api/v1/chat/historial/{id} - Obtener historial
POST /api/v1/chat/start - Iniciar conversación

Admin:

GET /api/v1/admin/estados - Gestionar estados
POST /api/v1/admin/variables - Configurar variables
GET /api/v1/admin/metricas - Ver métricas ML

🔍 Monitoreo
Logs del Sistema:
bashtail -f logs/app.log       
tail -f logs/ml.log       
tail -f logs/auto_train.log 
Métricas ML:

Accuracy del modelo
Confianza por intención
Conversiones por flujo
Tiempo de respuesta

Contribuir

Fork del proyecto
Crear branch: git checkout -b feature/nueva-feature
Commit: git commit -m 'Agregar nueva feature'
Push: git push origin feature/nueva-feature
Pull Request

📝 Licencia
Proyecto Fabian Gerena
Email: j.gerena@sgnpl.com
Slack: #proyecto-chat


