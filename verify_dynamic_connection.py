"""
üîç VERIFICADOR DE CONEXI√ìN DIN√ÅMICA
- Verifica que las tablas est√©n conectadas
- Fuerza la carga de datos din√°micos
- Elimina dependencia de c√≥digo hardcodeado
"""

from app.db.session import SessionLocal
from sqlalchemy import text
import json

def verify_dynamic_tables(  ):
    """Verificar que las tablas din√°micas tengan datos"""
    
    db = SessionLocal()
    
    try:
        print("üîç VERIFICANDO CONEXI√ìN DIN√ÅMICA...")
        print("=" * 50)
        
        # 1. ML Intention Mappings
        query1 = text("SELECT COUNT(*) FROM ml_intention_mappings WHERE active = 1")
        ml_count = db.execute(query1).scalar()
        print(f"üìä ML Mappings activos: {ml_count}")
        
        if ml_count > 0:
            # Mostrar algunos ejemplos
            query1_data = text("SELECT TOP 3 ml_intention, bd_condition, confidence_threshold FROM ml_intention_mappings WHERE active = 1")
            for row in db.execute(query1_data):
                print(f"   ‚Ä¢ {row[0]} ‚Üí {row[1]} (confianza: {row[2]})")
        
        # 2. Keyword Patterns
        query2 = text("SELECT COUNT(*) FROM keyword_condition_patterns WHERE active = 1")
        keyword_count = db.execute(query2).scalar()
        print(f"üî§ Keyword Patterns activos: {keyword_count}")
        
        if keyword_count > 0:
            # Mostrar algunos ejemplos
            query2_data = text("SELECT TOP 3 keyword_pattern, bd_condition, confidence_score FROM keyword_condition_patterns WHERE active = 1")
            for row in db.execute(query2_data):
                print(f"   ‚Ä¢ '{row[0]}' ‚Üí {row[1]} (confianza: {row[2]})")
        
        # 3. Condition Evaluators
        query3 = text("SELECT COUNT(*) FROM condition_evaluators WHERE active = 1")
        evaluator_count = db.execute(query3).scalar()
        print(f"‚öôÔ∏è Evaluadores activos: {evaluator_count}")
        
        if evaluator_count > 0:
            # Mostrar algunos ejemplos
            query3_data = text("SELECT TOP 3 condition_name, evaluation_method FROM condition_evaluators WHERE active = 1")
            for row in db.execute(query3_data):
                print(f"   ‚Ä¢ {row[0]} ‚Üí {row[1]}")
        
        print("=" * 50)
        
        if ml_count > 0 and keyword_count > 0:
            print("‚úÖ TABLAS DIN√ÅMICAS CON DATOS - Sistema deber√≠a funcionar din√°micamente")
            return True
        else:
            print("‚ùå TABLAS VAC√çAS - Sistema usar√° fallback hardcodeado")
            return False
            
    except Exception as e:
        print(f"‚ùå ERROR conectando a tablas din√°micas: {e}")
        return False
        
    finally:
        db.close()

def test_dynamic_service():
    """Test completo del servicio din√°mico"""
    
    print("\nüß™ TESTING SERVICIO DIN√ÅMICO...")
    print("=" * 50)
    
    try:
        from app.services.dynamic_transition_service import create_dynamic_transition_service
        
        db = SessionLocal()
        dynamic_service = create_dynamic_transition_service(db)
        
        # Test de configuraci√≥n
        stats = dynamic_service.get_stats()
        print(f"üìä Configuraci√≥n cargada:")
        print(f"   ML mappings: {stats['configuration']['ml_mappings_count']}")
        print(f"   Keyword patterns: {stats['configuration']['keyword_patterns_count']}")
        print(f"   Evaluadores: {stats['configuration']['condition_evaluators_count']}")
        print(f"   Fuente: {stats['configuration']['configuration_source']}")
        
        # Test de transici√≥n real
        print(f"\nüéØ TEST DE TRANSICI√ìN DIN√ÅMICA:")
        
        test_result = dynamic_service.determine_next_state(
            current_state="proponer_planes_pago",
            user_message="acepto",
            ml_result={"intention": "CONFIRMACION_EXITOSA", "confidence": 0.9},
            context={"cliente_encontrado": True}
        )
        
        print(f"   Input: 'acepto' en estado 'proponer_planes_pago'")
        print(f"   Output: {test_result['next_state']}")
        print(f"   M√©todo: {test_result['detection_method']}")
        print(f"   Condici√≥n: {test_result['condition_detected']}")
        
        if test_result['next_state'] != "proponer_planes_pago":  # Deber√≠a cambiar
            print("‚úÖ SISTEMA DIN√ÅMICO FUNCIONANDO CORRECTAMENTE")
            return True
        else:
            print("‚ùå SISTEMA NO EST√Å CAMBIANDO ESTADOS DIN√ÅMICAMENTE")
            return False
            
        db.close()
        
    except Exception as e:
        print(f"‚ùå ERROR en test din√°mico: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    # Ejecutar verificaciones
    tables_ok = verify_dynamic_tables()
    service_ok = test_dynamic_service()
    
    print(f"\nüéØ RESULTADO FINAL:")
    print(f"   Tablas con datos: {'‚úÖ' if tables_ok else '‚ùå'}")
    print(f"   Servicio din√°mico: {'‚úÖ' if service_ok else '‚ùå'}")
    
    if tables_ok and service_ok:
        print(f"\nüéâ SISTEMA 100% DIN√ÅMICO OPERATIVO")
    else:
        print(f"\nüîß REQUIERE CORRECCI√ìN")