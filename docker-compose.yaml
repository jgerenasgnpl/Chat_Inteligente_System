version: '3.8'

services:
  # ==================================================
  # BASE DE DATOS SQL SERVER
  # ==================================================
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: negotiation_chat_db
    hostname: sqlserver
    restart: unless-stopped
    volumes:
      - sqlserver_data:/var/opt/mssql
      - ./sql_scripts:/docker-entrypoint-initdb.d
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${SQLSERVER_PASSWORD:-SecurePassword123!}
      - MSSQL_PID=Express
    ports:
      - "${SQLSERVER_PORT:-1433}:1433"
    networks:
      - negotiation-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P $$SA_PASSWORD -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ==================================================
  # REDIS CACHE
  # ==================================================
  redis:
    image: redis:7-alpine
    container_name: negotiation_chat_redis
    hostname: redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - negotiation-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}

  # ==================================================
  # API PRINCIPAL
  # ==================================================
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: base
    container_name: negotiation_chat_api
    hostname: api
    restart: unless-stopped
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
      - ./exports:/app/exports
      - ./backups:/app/backups
    ports:
      - "${API_PORT:-8000}:8000"
    networks:
      - negotiation-network
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - SQLSERVER_SERVER=sqlserver,1433
      - SQLSERVER_DB=${SQLSERVER_DB:-turnosvirtuales_dev}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - WORKERS=${WORKERS:-1}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # ==================================================
  # NGINX LOAD BALANCER (Opcional - para escalabilidad)
  # ==================================================
  nginx:
    image: nginx:alpine
    container_name: negotiation_chat_nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - negotiation-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==================================================
  # SCHEDULER DE TAREAS (Opcional - para producción)
  # ==================================================
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: base
    container_name: negotiation_chat_scheduler
    restart: unless-stopped
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./backups:/app/backups
    networks:
      - negotiation-network
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - SQLSERVER_SERVER=sqlserver,1433
      - SQLSERVER_DB=${SQLSERVER_DB:-turnosvirtuales_dev}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - SCHEDULER_ONLY=true
    command: python -m app.scheduler_worker
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # ==================================================
  # MONITORING (Opcional - para producción)
  # ==================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: negotiation_chat_prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - negotiation-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: negotiation_chat_grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - negotiation-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}

# ==================================================
# CONFIGURACIÓN DE REDES
# ==================================================
networks:
  negotiation-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# ==================================================
# VOLÚMENES PERSISTENTES
# ==================================================
volumes:
  sqlserver_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ==================================================
# ARCHIVO .env DE EJEMPLO
# ==================================================
# .env.example
# 
# # Base de datos
# SQLSERVER_PASSWORD=SecurePassword123!
# SQLSERVER_DB=turnosvirtuales_dev
# SQLSERVER_PORT=1433
# 
# # Redis
# REDIS_PASSWORD=redis_secure_password
# REDIS_PORT=6379
# 
# # API
# API_PORT=8000
# OPENAI_API_KEY=sk-proj-your-key-here
# LOG_LEVEL=INFO
# ENVIRONMENT=production
# 
# # Nginx
# NGINX_PORT=80
# NGINX_SSL_PORT=443
# 
# # Monitoring
# PROMETHEUS_PORT=9090
# GRAFANA_PORT=3000
# GRAFANA_PASSWORD=admin123
# 
# # Workers
# WORKERS=2