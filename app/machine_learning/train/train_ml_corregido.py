import pandas as pd
import numpy as np
import pyodbc
import os
import sys
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score
from joblib import dump
import re
import string
from datetime import datetime
import argparse

class EntrenadorMLCorregido:
    """
    Entrenador ML corregido con auto-generaci√≥n de datos y rutas flexibles
    """
    
    def __init__(self):
        """Inicializar entrenador con configuraci√≥n autom√°tica"""
        self.proyecto_dir = self._detectar_directorio_proyecto()
        self.data_dir = os.path.join(self.proyecto_dir, "data", "training")
        self.models_dir = os.path.join(self.proyecto_dir, "models")
        
        # Crear directorios si no existen
        os.makedirs(self.data_dir, exist_ok=True)
        os.makedirs(self.models_dir, exist_ok=True)
        
        print(f"üìÅ Directorio proyecto: {self.proyecto_dir}")
        print(f"üìÅ Directorio datos: {self.data_dir}")
        print(f"üìÅ Directorio modelos: {self.models_dir}")
        
        self.conn = None
        self._inicializar_conexion_bd()
    
    def _detectar_directorio_proyecto(self):
        """Detecta autom√°ticamente el directorio del proyecto"""
        # Obtener directorio actual y buscar hacia arriba
        current_dir = os.getcwd()
        
        # Buscar indicadores del proyecto
        indicadores = ['main.py', 'app', 'requirements.txt']
        
        # Verificar directorio actual
        for indicador in indicadores:
            if os.path.exists(os.path.join(current_dir, indicador)):
                print(f"‚úÖ Proyecto detectado en: {current_dir}")
                return current_dir
        
        # Buscar en directorios padre
        parent = os.path.dirname(current_dir)
        while parent != current_dir:  # Evitar bucle infinito
            for indicador in indicadores:
                if os.path.exists(os.path.join(parent, indicador)):
                    print(f"‚úÖ Proyecto detectado en directorio padre: {parent}")
                    return parent
            current_dir = parent
            parent = os.path.dirname(current_dir)
        
        # Si no encuentra, usar directorio actual
        print(f"‚ö†Ô∏è Usando directorio actual como proyecto: {os.getcwd()}")
        return os.getcwd()
    
    def _inicializar_conexion_bd(self):
        """Inicializar conexi√≥n a base de datos"""
        try:
            self.conn = pyodbc.connect(
                'DRIVER={ODBC Driver 17 for SQL Server};'
                'SERVER=172.18.79.20,1433;'
                'DATABASE=turnosvirtuales_dev;'
                'Trusted_Connection=yes'
            )
            print("‚úÖ Conexi√≥n a BD establecida")
        except Exception as e:
            print(f"‚ùå Error conectando a BD: {e}")
            print("‚ö†Ô∏è Continuando sin conexi√≥n BD - usar√° datos por defecto")
    
    def generar_datos_entrenamiento_excel(self):
        """
        Genera archivo Excel con datos de entrenamiento para cobranza
        """
        archivo_datos = os.path.join(self.data_dir, "datos_entrenamiento.xlsx")
        
        print(f"üìù Generando datos de entrenamiento en: {archivo_datos}")
        
        # Datos de entrenamiento espec√≠ficos para cobranza
        datos = [
            # CONSULTA_DEUDA
            ("cuanto debo", "CONSULTA_DEUDA", "Cliente pregunta por su deuda"),
            ("cu√°nto debo", "CONSULTA_DEUDA", "Cliente pregunta por su deuda"),
            ("cual es mi deuda", "CONSULTA_DEUDA", "Cliente pregunta por su deuda"),
            ("saldo pendiente", "CONSULTA_DEUDA", "Cliente pregunta por saldo"),
            ("mi saldo", "CONSULTA_DEUDA", "Cliente consulta saldo"),
            ("informaci√≥n de mi deuda", "CONSULTA_DEUDA", "Cliente solicita informaci√≥n"),
            ("estado de cuenta", "CONSULTA_DEUDA", "Cliente pide estado de cuenta"),
            ("valor que debo", "CONSULTA_DEUDA", "Cliente pregunta valor"),
            ("monto pendiente", "CONSULTA_DEUDA", "Cliente consulta monto"),
            ("cu√°nto es lo que debo", "CONSULTA_DEUDA", "Cliente pregunta deuda"),
            ("me pueden decir cuanto debo", "CONSULTA_DEUDA", "Cliente solicita informaci√≥n"),
            ("necesito saber mi deuda", "CONSULTA_DEUDA", "Cliente necesita informaci√≥n"),
            
            # INTENCION_PAGO
            ("quiero pagar", "INTENCION_PAGO", "Cliente expresa intenci√≥n de pagar"),
            ("como puedo pagar", "INTENCION_PAGO", "Cliente pregunta forma de pago"),
            ("opciones de pago", "INTENCION_PAGO", "Cliente solicita opciones"),
            ("voy a pagar", "INTENCION_PAGO", "Cliente confirma intenci√≥n"),
            ("quiero cancelar", "INTENCION_PAGO", "Cliente quiere cancelar deuda"),
            ("formas de pago", "INTENCION_PAGO", "Cliente pregunta formas"),
            ("abonar", "INTENCION_PAGO", "Cliente quiere abonar"),
            ("liquidar deuda", "INTENCION_PAGO", "Cliente quiere liquidar"),
            ("pagar completo", "INTENCION_PAGO", "Cliente quiere pago total"),
            ("hacer el pago", "INTENCION_PAGO", "Cliente quiere hacer pago"),
            ("realizar pago", "INTENCION_PAGO", "Cliente quiere realizar pago"),
            ("efectuar pago", "INTENCION_PAGO", "Cliente quiere efectuar pago"),
            
            # SOLICITUD_PLAN
            ("plan de pagos", "SOLICITUD_PLAN", "Cliente solicita plan"),
            ("cuotas", "SOLICITUD_PLAN", "Cliente pregunta por cuotas"),
            ("facilidades de pago", "SOLICITUD_PLAN", "Cliente solicita facilidades"),
            ("financiaci√≥n", "SOLICITUD_PLAN", "Cliente solicita financiaci√≥n"),
            ("arreglo de pago", "SOLICITUD_PLAN", "Cliente solicita arreglo"),
            ("acuerdo", "SOLICITUD_PLAN", "Cliente busca acuerdo"),
            ("negociar", "SOLICITUD_PLAN", "Cliente quiere negociar"),
            ("pagar en cuotas", "SOLICITUD_PLAN", "Cliente quiere cuotas"),
            ("plan", "SOLICITUD_PLAN", "Cliente solicita plan"),
            ("convenio", "SOLICITUD_PLAN", "Cliente busca convenio"),
            ("descuento", "SOLICITUD_PLAN", "Cliente solicita descuento"),
            ("rebaja", "SOLICITUD_PLAN", "Cliente solicita rebaja"),
            
            # CONFIRMACION
            ("si", "CONFIRMACION", "Cliente confirma"),
            ("s√≠", "CONFIRMACION", "Cliente confirma"),
            ("acepto", "CONFIRMACION", "Cliente acepta"),
            ("de acuerdo", "CONFIRMACION", "Cliente est√° de acuerdo"),
            ("confirmo", "CONFIRMACION", "Cliente confirma"),
            ("est√° bien", "CONFIRMACION", "Cliente acepta"),
            ("perfecto", "CONFIRMACION", "Cliente est√° conforme"),
            ("entendido", "CONFIRMACION", "Cliente entiende"),
            ("correcto", "CONFIRMACION", "Cliente confirma"),
            ("vale", "CONFIRMACION", "Cliente acepta"),
            ("ok", "CONFIRMACION", "Cliente acepta"),
            ("bueno", "CONFIRMACION", "Cliente acepta"),
            
            # RECHAZO
            ("no", "RECHAZO", "Cliente rechaza"),
            ("no puedo", "RECHAZO", "Cliente no puede"),
            ("imposible", "RECHAZO", "Cliente dice que es imposible"),
            ("no tengo dinero", "RECHAZO", "Cliente no tiene recursos"),
            ("no me interesa", "RECHAZO", "Cliente no est√° interesado"),
            ("rechazo", "RECHAZO", "Cliente rechaza"),
            ("no acepto", "RECHAZO", "Cliente no acepta"),
            ("no quiero", "RECHAZO", "Cliente no quiere"),
            ("no voy a pagar", "RECHAZO", "Cliente se reh√∫sa"),
            ("no estoy de acuerdo", "RECHAZO", "Cliente no est√° de acuerdo"),
            ("no me conviene", "RECHAZO", "Cliente dice que no conviene"),
            ("muy caro", "RECHAZO", "Cliente considera caro"),
            
            # SOLICITUD_INFO
            ("informaci√≥n", "SOLICITUD_INFO", "Cliente solicita informaci√≥n"),
            ("detalles", "SOLICITUD_INFO", "Cliente solicita detalles"),
            ("explicaci√≥n", "SOLICITUD_INFO", "Cliente solicita explicaci√≥n"),
            ("m√°s informaci√≥n", "SOLICITUD_INFO", "Cliente solicita m√°s info"),
            ("me puedes explicar", "SOLICITUD_INFO", "Cliente solicita explicaci√≥n"),
            ("no entiendo", "SOLICITUD_INFO", "Cliente no entiende"),
            ("qu√© significa", "SOLICITUD_INFO", "Cliente pregunta significado"),
            ("por qu√©", "SOLICITUD_INFO", "Cliente pregunta raz√≥n"),
            ("c√≥mo", "SOLICITUD_INFO", "Cliente pregunta c√≥mo"),
            ("ayuda", "SOLICITUD_INFO", "Cliente solicita ayuda"),
            ("explique mejor", "SOLICITUD_INFO", "Cliente solicita mejor explicaci√≥n"),
            ("no comprendo", "SOLICITUD_INFO", "Cliente no comprende"),
            
            # IDENTIFICACION
            ("mi cedula es", "IDENTIFICACION", "Cliente proporciona c√©dula"),
            ("documento", "IDENTIFICACION", "Cliente menciona documento"),
            ("identificaci√≥n", "IDENTIFICACION", "Cliente menciona identificaci√≥n"),
            ("soy", "IDENTIFICACION", "Cliente se identifica"),
            ("mi n√∫mero", "IDENTIFICACION", "Cliente proporciona n√∫mero"),
            ("cc", "IDENTIFICACION", "Cliente menciona CC"),
            ("c√©dula", "IDENTIFICACION", "Cliente menciona c√©dula"),
            ("mi nombre es", "IDENTIFICACION", "Cliente dice su nombre"),
            ("me llamo", "IDENTIFICACION", "Cliente dice su nombre"),
            ("identificarme", "IDENTIFICACION", "Cliente quiere identificarse"),
            ("1020428633", "IDENTIFICACION", "Ejemplo de c√©dula"),
            ("12345678", "IDENTIFICACION", "Ejemplo de documento"),
            
            # SELECCION_OPCION
            ("opci√≥n 1", "SELECCION_OPCION", "Cliente selecciona opci√≥n"),
            ("opci√≥n 2", "SELECCION_OPCION", "Cliente selecciona opci√≥n"),
            ("opci√≥n 3", "SELECCION_OPCION", "Cliente selecciona opci√≥n"),
            ("primera", "SELECCION_OPCION", "Cliente selecciona primera"),
            ("segunda", "SELECCION_OPCION", "Cliente selecciona segunda"),
            ("tercera", "SELECCION_OPCION", "Cliente selecciona tercera"),
            ("1", "SELECCION_OPCION", "Cliente selecciona 1"),
            ("2", "SELECCION_OPCION", "Cliente selecciona 2"),
            ("3", "SELECCION_OPCION", "Cliente selecciona 3"),
            ("elijo", "SELECCION_OPCION", "Cliente elige"),
            ("escojo", "SELECCION_OPCION", "Cliente escoge"),
            ("prefiero", "SELECCION_OPCION", "Cliente prefiere"),
            
            # SALUDO
            ("hola", "SALUDO", "Cliente saluda"),
            ("buenos d√≠as", "SALUDO", "Cliente saluda"),
            ("buenas tardes", "SALUDO", "Cliente saluda"),
            ("buenas noches", "SALUDO", "Cliente saluda"),
            ("saludos", "SALUDO", "Cliente saluda"),
            ("buen d√≠a", "SALUDO", "Cliente saluda"),
            ("qu√© tal", "SALUDO", "Cliente saluda"),
            ("c√≥mo est√°", "SALUDO", "Cliente pregunta como est√°"),
            ("muy buenas", "SALUDO", "Cliente saluda"),
            ("buenas", "SALUDO", "Cliente saluda"),
            ("hey", "SALUDO", "Cliente saluda informal"),
            ("holi", "SALUDO", "Cliente saluda informal"),
            
            # DESPEDIDA
            ("adi√≥s", "DESPEDIDA", "Cliente se despide"),
            ("hasta luego", "DESPEDIDA", "Cliente se despide"),
            ("nos vemos", "DESPEDIDA", "Cliente se despide"),
            ("chao", "DESPEDIDA", "Cliente se despide"),
            ("bye", "DESPEDIDA", "Cliente se despide"),
            ("hasta la vista", "DESPEDIDA", "Cliente se despide"),
            ("que tenga buen d√≠a", "DESPEDIDA", "Cliente se despide"),
            ("gracias", "DESPEDIDA", "Cliente agradece"),
            ("muchas gracias", "DESPEDIDA", "Cliente agradece"),
            ("hasta pronto", "DESPEDIDA", "Cliente se despide"),
            ("buen d√≠a", "DESPEDIDA", "Cliente se despide"),
            ("que est√© bien", "DESPEDIDA", "Cliente se despide")
        ]
        
        # Crear DataFrame
        df = pd.DataFrame(datos, columns=['texto_mensaje', 'intencion_real', 'contexto_adicional'])
        
        # Guardar en Excel
        df.to_excel(archivo_datos, index=False)
        
        print(f"‚úÖ Archivo de datos generado: {len(datos)} ejemplos")
        print(f"üìä Distribuci√≥n por intenci√≥n:")
        distribucion = df['intencion_real'].value_counts()
        for intencion, count in distribucion.items():
            print(f"   {intencion}: {count} ejemplos")
        
        return archivo_datos
    
    def generar_estados_conversacion_excel(self):
        """
        Genera archivo Excel con estados de conversaci√≥n
        """
        archivo_estados = os.path.join(self.data_dir, "estados_conversacion.xlsx")
        
        print(f"üìù Generando estados de conversaci√≥n en: {archivo_estados}")
        
        # Estados de conversaci√≥n para cobranza
        estados = [
            {
                'nombre': 'validar_documento',
                'mensaje_template': '¬°Hola! Soy tu asistente de Systemgroup. Para ayudarte mejor, ¬øpodr√≠as proporcionarme tu n√∫mero de c√©dula?',
                'accion': 'validar_documento',
                'condicion': 'tiene_documento_valido',
                'estado_sig_true': 'informar_deuda',
                'estado_sig_false': 'validar_documento',
                'estado_sig_default': 'informar_deuda'
            },
            {
                'nombre': 'informar_deuda',
                'mensaje_template': 'Hola {{nombre_cliente}}, encontr√© tu informaci√≥n. Tu saldo actual con {{banco}} es de {{saldo_total}}. ¬øTe gustar√≠a conocer las opciones de pago disponibles?',
                'accion': 'consultar_base_datos',
                'condicion': 'cliente_acepta',
                'estado_sig_true': 'proponer_planes_pago',
                'estado_sig_false': 'evaluar_intencion_pago',
                'estado_sig_default': 'proponer_planes_pago'
            },
            {
                'nombre': 'proponer_planes_pago',
                'mensaje_template': 'Te ofrezco estas opciones: 1Ô∏è‚É£ Pago √∫nico de {{oferta_2}} con descuento 2Ô∏è‚É£ Plan en cuotas desde {{hasta_3_cuotas}}. ¬øCu√°l te interesa?',
                'accion': 'crear_planes_pago',
                'condicion': 'cliente_selecciona_plan',
                'estado_sig_true': 'generar_acuerdo',
                'estado_sig_false': 'gestionar_objecion',
                'estado_sig_default': 'seleccionar_plan'
            },
            {
                'nombre': 'seleccionar_plan',
                'mensaje_template': 'Has elegido un plan de pago. ¬øConfirmas tu selecci√≥n?',
                'accion': None,
                'condicion': 'cliente_acepta',
                'estado_sig_true': 'generar_acuerdo',
                'estado_sig_false': 'proponer_planes_pago',
                'estado_sig_default': 'generar_acuerdo'
            },
            {
                'nombre': 'evaluar_intencion_pago',
                'mensaje_template': '¬øEst√° interesado en realizar un acuerdo de pago?',
                'accion': None,
                'condicion': 'cliente_acepta',
                'estado_sig_true': 'proponer_planes_pago',
                'estado_sig_false': 'gestionar_objecion',
                'estado_sig_default': 'proponer_planes_pago'
            },
            {
                'nombre': 'gestionar_objecion',
                'mensaje_template': 'Entiendo tu situaci√≥n. ¬øTe gustar√≠a que exploremos otras alternativas flexibles?',
                'accion': None,
                'condicion': 'cliente_acepta',
                'estado_sig_true': 'proponer_planes_pago',
                'estado_sig_false': 'finalizar_conversacion',
                'estado_sig_default': 'proponer_planes_pago'
            },
            {
                'nombre': 'generar_acuerdo',
                'mensaje_template': '¬°Excelente! Voy a generar tu acuerdo de pago. Te enviar√© los detalles completos.',
                'accion': 'registrar_plan_pago',
                'condicion': None,
                'estado_sig_true': 'finalizar_conversacion',
                'estado_sig_false': 'finalizar_conversacion',
                'estado_sig_default': 'finalizar_conversacion'
            },
            {
                'nombre': 'cliente_no_encontrado',
                'mensaje_template': 'No encontr√© informaci√≥n para ese documento. Por favor verifica el n√∫mero o contacta al 123-456-7890.',
                'accion': None,
                'condicion': None,
                'estado_sig_true': 'validar_documento',
                'estado_sig_false': 'validar_documento',
                'estado_sig_default': 'validar_documento'
            },
            {
                'nombre': 'finalizar_conversacion',
                'mensaje_template': 'Perfecto. Hemos completado tu proceso de negociaci√≥n. ¬°Gracias por confiar en nosotros!',
                'accion': None,
                'condicion': None,
                'estado_sig_true': None,
                'estado_sig_false': None,
                'estado_sig_default': None
            }
        ]
        
        # Crear DataFrame
        df_estados = pd.DataFrame(estados)
        
        # Guardar en Excel
        df_estados.to_excel(archivo_estados, index=False)
        
        print(f"‚úÖ Archivo de estados generado: {len(estados)} estados")
        
        return archivo_estados
    
    def limpiar_texto(self, texto):
        """Limpiar y normalizar texto para ML"""
        if not texto or pd.isna(texto):
            return ""
        
        texto = str(texto).lower()
        texto = re.sub(f"[{re.escape(string.punctuation)}]", "", texto)
        
        # Stopwords b√°sicas en espa√±ol
        stopwords_es = {'el', 'la', 'de', 'que', 'y', 'a', 'en', 'un', 'es', 'se', 'no', 'te', 'lo', 'le', 'da', 'su', 'por', 'son', 'con', 'para', 'al', 'del', 'los', 'las'}
        palabras = [w for w in texto.split() if w not in stopwords_es and len(w) > 2]
        return " ".join(palabras)
    
    def entrenar_modelo_automatico(self, archivo_datos=None, archivo_estados=None):
        """
        Entrenamiento autom√°tico con generaci√≥n de datos si no existen
        """
        print("üöÄ === INICIANDO ENTRENAMIENTO AUTOM√ÅTICO ===")
        
        # Generar archivos si no se proporcionan
        if not archivo_datos:
            archivo_datos = self.generar_datos_entrenamiento_excel()
        
        if not archivo_estados:
            archivo_estados = self.generar_estados_conversacion_excel()
        
        # Verificar que existen los archivos
        if not os.path.exists(archivo_datos):
            raise FileNotFoundError(f"Archivo de datos no encontrado: {archivo_datos}")
        
        try:
            # 1. Cargar datos
            print(f"üìÇ Cargando datos desde: {archivo_datos}")
            df = pd.read_excel(archivo_datos)
            
            print(f"‚úÖ Datos cargados: {len(df)} ejemplos")
            print(f"üìä Columnas: {list(df.columns)}")
            
            # 2. Verificar columnas requeridas
            if 'texto_mensaje' not in df.columns or 'intencion_real' not in df.columns:
                raise ValueError("El archivo debe tener columnas 'texto_mensaje' e 'intencion_real'")
            
            # 3. Limpiar datos
            print("üßπ Limpiando datos...")
            df['texto_limpio'] = df['texto_mensaje'].apply(self.limpiar_texto)
            df = df[df['texto_limpio'].str.len() > 0]  # Remover filas vac√≠as
            df = df.drop_duplicates(subset=['texto_limpio'])  # Remover duplicados
            
            print(f"‚úÖ Datos limpiados: {len(df)} ejemplos √∫nicos")
            
            # 4. Preparar datos para entrenamiento
            X = df['texto_limpio']
            y = df['intencion_real']
            
            print(f"üìä Distribuci√≥n de intenciones:")
            for intencion, count in y.value_counts().items():
                print(f"   {intencion}: {count}")
            
            # 5. Dividir datos
            X_train, X_test, y_train, y_test = train_test_split(
                X, y, test_size=0.2, random_state=42, stratify=y
            )
            
            # 6. Crear pipeline
            print("ü§ñ Creando pipeline ML...")
            pipeline = Pipeline([
                ('tfidf', TfidfVectorizer(
                    max_features=5000,
                    ngram_range=(1, 2),
                    stop_words=None,
                    min_df=1,
                    max_df=0.8
                )),
                ('clf', LogisticRegression(
                    max_iter=1000,
                    random_state=42,
                    class_weight='balanced'
                ))
            ])
            
            # 7. Entrenar
            print("üéØ Entrenando modelo...")
            pipeline.fit(X_train, y_train)
            
            # 8. Evaluar
            print("üìä Evaluando modelo...")
            y_pred = pipeline.predict(X_test)
            accuracy = accuracy_score(y_test, y_pred)
            
            print(f"‚úÖ Entrenamiento completado!")
            print(f"üéØ Accuracy: {accuracy:.3f}")
            print("\nüìä Reporte detallado:")
            print(classification_report(y_test, y_pred))
            
            # 9. Probar con ejemplos
            self._probar_modelo(pipeline)
            
            # 10. Guardar modelo
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            modelo_path = os.path.join(self.models_dir, f"intention_classifier_{timestamp}.joblib")
            
            dump(pipeline, modelo_path)
            print(f"üíæ Modelo guardado: {modelo_path}")
            
            # 11. Registrar en BD si hay conexi√≥n
            if self.conn:
                self._registrar_modelo_bd(modelo_path, accuracy, len(df))
            
            # 12. Cargar estados si est√°n disponibles
            if os.path.exists(archivo_estados):
                self._cargar_estados_bd(archivo_estados)
            
            print("\nüéâ ¬°ENTRENAMIENTO COMPLETADO EXITOSAMENTE!")
            print(f"üìà Accuracy: {accuracy:.1%}")
            print(f"üíæ Modelo: {modelo_path}")
            
            return {
                "success": True,
                "accuracy": accuracy,
                "modelo_path": modelo_path,
                "ejemplos": len(df)
            }
            
        except Exception as e:
            print(f"‚ùå Error durante entrenamiento: {e}")
            import traceback
            traceback.print_exc()
            return {"success": False, "error": str(e)}
    
    def _probar_modelo(self, pipeline):
        """Probar modelo con ejemplos"""
        ejemplos_prueba = [
            "cuanto debo",
            "quiero hacer un pago", 
            "no puedo pagar",
            "1020428633",
            "hola buenos dias",
            "gracias",
            "plan de cuotas",
            "acepto la propuesta",
            "no me interesa"
        ]
        
        print("\nüß™ === PRUEBAS DEL MODELO ===")
        for ejemplo in ejemplos_prueba:
            ejemplo_limpio = self.limpiar_texto(ejemplo)
            if ejemplo_limpio:  # Solo si hay texto despu√©s de limpiar
                prediccion = pipeline.predict([ejemplo_limpio])[0]
                probabilidades = pipeline.predict_proba([ejemplo_limpio])[0]
                confianza = max(probabilidades)
                
                print(f"'{ejemplo}' ‚Üí {prediccion} (confianza: {confianza:.2f})")
    
    def _registrar_modelo_bd(self, modelo_path, accuracy, ejemplos):
        """Registrar modelo en base de datos"""
        try:
            cursor = self.conn.cursor()
            
            # Crear tabla si no existe
            cursor.execute("""
                IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'modelos_ml')
                BEGIN
                    CREATE TABLE modelos_ml (
                        id INT IDENTITY(1,1) PRIMARY KEY,
                        nombre VARCHAR(100),
                        tipo VARCHAR(50),
                        ruta_modelo VARCHAR(255),
                        accuracy DECIMAL(5,4),
                        ejemplos_entrenamiento INT,
                        fecha_entrenamiento DATETIME2 DEFAULT GETDATE(),
                        activo BIT DEFAULT 1
                    )
                END
            """)
            
            # Desactivar modelos anteriores
            cursor.execute("UPDATE modelos_ml SET activo = 0 WHERE tipo = 'intention_classifier'")
            
            # Insertar nuevo modelo
            cursor.execute("""
                INSERT INTO modelos_ml (nombre, tipo, ruta_modelo, accuracy, ejemplos_entrenamiento)
                VALUES (?, ?, ?, ?, ?)
            """, 
                f'Modelo_Auto_{datetime.now().strftime("%Y%m%d_%H%M%S")}',
                'intention_classifier', 
                modelo_path, 
                accuracy, 
                ejemplos
            )
            
            self.conn.commit()
            print("‚úÖ Modelo registrado en BD")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error registrando modelo en BD: {e}")
    
    def _cargar_estados_bd(self, archivo_estados):
        """Cargar estados en base de datos"""
        if not self.conn:
            print("‚ö†Ô∏è Sin conexi√≥n BD, saltando carga de estados")
            return
        
        try:
            print(f"üìä Cargando estados desde: {archivo_estados}")
            df_estados = pd.read_excel(archivo_estados)
            
            cursor = self.conn.cursor()
            
            for _, row in df_estados.iterrows():
                cursor.execute("""
                    IF NOT EXISTS (SELECT 1 FROM Estados_Conversacion WHERE nombre = ?)
                    BEGIN
                        INSERT INTO Estados_Conversacion 
                        (nombre, mensaje_template, accion, condicion, 
                         estado_siguiente_true, estado_siguiente_false, estado_siguiente_default, activo)
                        VALUES (?, ?, ?, ?, ?, ?, ?, 1)
                    END
                    ELSE
                    BEGIN
                        UPDATE Estados_Conversacion 
                        SET mensaje_template = ?, accion = ?, condicion = ?,
                            estado_siguiente_true = ?, estado_siguiente_false = ?, estado_siguiente_default = ?
                        WHERE nombre = ?
                    END
                """, 
                    row['nombre'],  # Para el EXISTS
                    row['nombre'], row['mensaje_template'], row.get('accion'), row.get('condicion'),
                    row.get('estado_sig_true'), row.get('estado_sig_false'), row.get('estado_sig_default'),
                    # Para el UPDATE
                    row['mensaje_template'], row.get('accion'), row.get('condicion'),
                    row.get('estado_sig_true'), row.get('estado_sig_false'), row.get('estado_sig_default'),
                    row['nombre']
                )
            
            self.conn.commit()
            print(f"‚úÖ {len(df_estados)} estados cargados/actualizados en BD")
            
        except Exception as e:
            print(f"‚ùå Error cargando estados: {e}")

def main():
    """Funci√≥n principal mejorada"""
    parser = argparse.ArgumentParser(description='Entrenador ML Automatizado para Cobranza')
    parser.add_argument('--datos', help='Ruta al Excel con datos (opcional - se generar√° autom√°ticamente)')
    parser.add_argument('--estados', help='Ruta al Excel con estados (opcional - se generar√° autom√°ticamente)')
    parser.add_argument('--auto', action='store_true', help='Modo autom√°tico - genera todos los archivos')
    
    args = parser.parse_args()
    
    print("ü§ñ === ENTRENADOR ML AUTOMATIZADO ===")
    print("Para sistema de cobranza y negociaci√≥n")
    print("="*50)
    
    # Crear entrenador
    entrenador = EntrenadorMLCorregido()
    
    if args.auto or (not args.datos and not args.estados):
        print("üöÄ Modo autom√°tico activado - generando archivos y entrenando...")
        resultado = entrenador.entrenar_modelo_automatico()
    else:
        print("üìÇ Usando archivos especificados...")
        resultado = entrenador.entrenar_modelo_automatico(args.datos, args.estados)
    
    if resultado["success"]:
        print(f"\nüéâ ¬°ENTRENAMIENTO EXITOSO!")
        print(f"üìà Accuracy: {resultado['accuracy']:.1%}")
        print(f"üíæ Modelo guardado en: {resultado['modelo_path']}")
        print(f"üìä Ejemplos entrenados: {resultado['ejemplos']}")
        print(f"\n‚úÖ Para usar el modelo, ejecuta:")
        print(f"python main.py")
    else:
        print(f"\n‚ùå Entrenamiento fall√≥: {resultado['error']}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())